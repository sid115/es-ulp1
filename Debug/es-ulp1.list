
es-ulp1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cfc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002e90  08002e90  00012e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ea8  08002ea8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ea8  08002ea8  00012ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002eb0  08002eb0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eb0  08002eb0  00012eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002eb4  08002eb4  00012eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08002ec4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002ec4  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008564  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016ab  00000000  00000000  000285e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  00029c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000562  00000000  00000000  0002a398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015213  00000000  00000000  0002a8fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000085a7  00000000  00000000  0003fb0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008440b  00000000  00000000  000480b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c18  00000000  00000000  000cc4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000ce0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002e78 	.word	0x08002e78

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002e78 	.word	0x08002e78

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fc74 	bl	8000dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f82c 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8ea 	bl	80006b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f8be 	bl	8000660 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004e4:	f000 f892 	bl	800060c <MX_USART1_UART_Init>
  while (1)
  {  
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_UART_Receive_IT(&huart2, rxBuffer, L1_PDU_size);
 80004e8:	2210      	movs	r2, #16
 80004ea:	490d      	ldr	r1, [pc, #52]	; (8000520 <main+0x50>)
 80004ec:	480d      	ldr	r0, [pc, #52]	; (8000524 <main+0x54>)
 80004ee:	f001 fd69 	bl	8001fc4 <HAL_UART_Receive_IT>

    if (dataReceived) {
 80004f2:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <main+0x58>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0f6      	beq.n	80004e8 <main+0x18>
      L1_receive(L1_PDU);
 80004fa:	480c      	ldr	r0, [pc, #48]	; (800052c <main+0x5c>)
 80004fc:	f000 f9d0 	bl	80008a0 <L1_receive>

      dataReceived = false;
 8000500:	4b09      	ldr	r3, [pc, #36]	; (8000528 <main+0x58>)
 8000502:	2200      	movs	r2, #0
 8000504:	701a      	strb	r2, [r3, #0]

      while (!dataTransmitted) {};
 8000506:	bf00      	nop
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <main+0x60>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	f083 0301 	eor.w	r3, r3, #1
 8000510:	b2db      	uxtb	r3, r3
 8000512:	2b00      	cmp	r3, #0
 8000514:	d1f8      	bne.n	8000508 <main+0x38>
      dataTransmitted = false;
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <main+0x60>)
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, rxBuffer, L1_PDU_size);
 800051c:	e7e4      	b.n	80004e8 <main+0x18>
 800051e:	bf00      	nop
 8000520:	200000c4 	.word	0x200000c4
 8000524:	2000006c 	.word	0x2000006c
 8000528:	200000d4 	.word	0x200000d4
 800052c:	200000b0 	.word	0x200000b0
 8000530:	200000d5 	.word	0x200000d5

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f002 fc5e 	bl	8002e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b29      	ldr	r3, [pc, #164]	; (8000604 <SystemClock_Config+0xd0>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a28      	ldr	r2, [pc, #160]	; (8000604 <SystemClock_Config+0xd0>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b26      	ldr	r3, [pc, #152]	; (8000604 <SystemClock_Config+0xd0>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b23      	ldr	r3, [pc, #140]	; (8000608 <SystemClock_Config+0xd4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000580:	4a21      	ldr	r2, [pc, #132]	; (8000608 <SystemClock_Config+0xd4>)
 8000582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <SystemClock_Config+0xd4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000594:	2302      	movs	r3, #2
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059c:	2310      	movs	r3, #16
 800059e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a0:	2302      	movs	r3, #2
 80005a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a4:	2300      	movs	r3, #0
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005a8:	2310      	movs	r3, #16
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005b2:	2304      	movs	r3, #4
 80005b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b6:	2307      	movs	r3, #7
 80005b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 ffd6 	bl	8001570 <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ca:	f000 fad3 	bl	8000b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
 80005d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d2:	2302      	movs	r3, #2
 80005d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2102      	movs	r1, #2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 fa38 	bl	8001a60 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005f6:	f000 fabd 	bl	8000b74 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3750      	adds	r7, #80	; 0x50
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_USART1_UART_Init+0x4c>)
 8000612:	4a12      	ldr	r2, [pc, #72]	; (800065c <MX_USART1_UART_Init+0x50>)
 8000614:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <MX_USART1_UART_Init+0x4c>)
 8000618:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800061c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_USART1_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_USART1_UART_Init+0x4c>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <MX_USART1_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_USART1_UART_Init+0x4c>)
 8000632:	220c      	movs	r2, #12
 8000634:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <MX_USART1_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_USART1_UART_Init+0x4c>)
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_USART1_UART_Init+0x4c>)
 8000644:	f001 fc2c 	bl	8001ea0 <HAL_UART_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800064e:	f000 fa91 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000028 	.word	0x20000028
 800065c:	40011000 	.word	0x40011000

08000660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000666:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <MX_USART2_UART_Init+0x50>)
 8000668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 800066c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000686:	220c      	movs	r2, #12
 8000688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000698:	f001 fc02 	bl	8001ea0 <HAL_UART_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006a2:	f000 fa67 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	2000006c 	.word	0x2000006c
 80006b0:	40004400 	.word	0x40004400

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <MX_GPIO_Init+0xd0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a2c      	ldr	r2, [pc, #176]	; (8000784 <MX_GPIO_Init+0xd0>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <MX_GPIO_Init+0xd0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a25      	ldr	r2, [pc, #148]	; (8000784 <MX_GPIO_Init+0xd0>)
 80006f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b23      	ldr	r3, [pc, #140]	; (8000784 <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_GPIO_Init+0xd0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a1e      	ldr	r2, [pc, #120]	; (8000784 <MX_GPIO_Init+0xd0>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_GPIO_Init+0xd0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_GPIO_Init+0xd0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a17      	ldr	r2, [pc, #92]	; (8000784 <MX_GPIO_Init+0xd0>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_GPIO_Init+0xd0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2120      	movs	r1, #32
 800073e:	4812      	ldr	r0, [pc, #72]	; (8000788 <MX_GPIO_Init+0xd4>)
 8000740:	f000 fefc 	bl	800153c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800074a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800074e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	4619      	mov	r1, r3
 800075a:	480c      	ldr	r0, [pc, #48]	; (800078c <MX_GPIO_Init+0xd8>)
 800075c:	f000 fd6a 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000760:	2320      	movs	r3, #32
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_GPIO_Init+0xd4>)
 8000778:	f000 fd5c 	bl	8001234 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800077c:	bf00      	nop
 800077e:	3728      	adds	r7, #40	; 0x28
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40023800 	.word	0x40023800
 8000788:	40020000 	.word	0x40020000
 800078c:	40020800 	.word	0x40020800

08000790 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000790:	b490      	push	{r4, r7}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  memcpy(L1_PDU, rxBuffer, L1_PDU_size);
 8000798:	4a06      	ldr	r2, [pc, #24]	; (80007b4 <HAL_UART_RxCpltCallback+0x24>)
 800079a:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <HAL_UART_RxCpltCallback+0x28>)
 800079c:	4614      	mov	r4, r2
 800079e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  dataReceived = true;
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_UART_RxCpltCallback+0x2c>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc90      	pop	{r4, r7}
 80007b2:	4770      	bx	lr
 80007b4:	200000b0 	.word	0x200000b0
 80007b8:	200000c4 	.word	0x200000c4
 80007bc:	200000d4 	.word	0x200000d4

080007c0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  dataTransmitted = true;
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <HAL_UART_TxCpltCallback+0x1c>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	701a      	strb	r2, [r3, #0]
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	200000d5 	.word	0x200000d5

080007e0 <crc>:
    cnt++;
    lastPress = millis;
  }
}

uint8_t crc(const uint8_t message[], size_t nBytes) {
 80007e0:	b480      	push	{r7}
 80007e2:	b087      	sub	sp, #28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
  uint8_t remainder = 0;	
 80007ea:	2300      	movs	r3, #0
 80007ec:	75fb      	strb	r3, [r7, #23]

  for (size_t byte = 0; byte < nBytes; ++byte) {
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	e022      	b.n	800083a <crc+0x5a>
    remainder ^= (message[byte] << (CRC_WIDTH - 8));
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	693b      	ldr	r3, [r7, #16]
 80007f8:	4413      	add	r3, r2
 80007fa:	781a      	ldrb	r2, [r3, #0]
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
 80007fe:	4053      	eors	r3, r2
 8000800:	75fb      	strb	r3, [r7, #23]
    for (uint8_t bit = 8; bit > 0; --bit) {
 8000802:	2308      	movs	r3, #8
 8000804:	73fb      	strb	r3, [r7, #15]
 8000806:	e012      	b.n	800082e <crc+0x4e>
      if (remainder & CRC_TOPBIT) {
 8000808:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800080c:	2b00      	cmp	r3, #0
 800080e:	da08      	bge.n	8000822 <crc+0x42>
        remainder = (remainder << 1) ^ CRC_POLYNOMIAL;
 8000810:	7dfb      	ldrb	r3, [r7, #23]
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	b25b      	sxtb	r3, r3
 8000816:	f083 0364 	eor.w	r3, r3, #100	; 0x64
 800081a:	43db      	mvns	r3, r3
 800081c:	b25b      	sxtb	r3, r3
 800081e:	75fb      	strb	r3, [r7, #23]
 8000820:	e002      	b.n	8000828 <crc+0x48>
      } else {
        remainder = (remainder << 1);
 8000822:	7dfb      	ldrb	r3, [r7, #23]
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	75fb      	strb	r3, [r7, #23]
    for (uint8_t bit = 8; bit > 0; --bit) {
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	3b01      	subs	r3, #1
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d1e9      	bne.n	8000808 <crc+0x28>
  for (size_t byte = 0; byte < nBytes; ++byte) {
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	3301      	adds	r3, #1
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	429a      	cmp	r2, r3
 8000840:	d3d8      	bcc.n	80007f4 <crc+0x14>
      }
    }
  }

  return remainder;
 8000842:	7dfb      	ldrb	r3, [r7, #23]
}
 8000844:	4618      	mov	r0, r3
 8000846:	371c      	adds	r7, #28
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <L1_send>:

void L1_send(uint8_t L1_SDU[]) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint8_t L1_PDU[L1_PDU_size] = { 0 };
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
  uint8_t L1_PCI[L1_PCI_size] = {_SOF, _EOF};
 8000868:	2300      	movs	r3, #0
 800086a:	81bb      	strh	r3, [r7, #12]

  L1_PDU[0] = L1_PCI[0]; /* SOF */
 800086c:	7b3b      	ldrb	r3, [r7, #12]
 800086e:	743b      	strb	r3, [r7, #16]
  memcpy(&L1_PDU[1], L1_SDU, L1_SDU_size);
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	3301      	adds	r3, #1
 8000876:	220e      	movs	r2, #14
 8000878:	6879      	ldr	r1, [r7, #4]
 800087a:	4618      	mov	r0, r3
 800087c:	f002 faee 	bl	8002e5c <memcpy>
  L1_PDU[L1_PDU_size - 1] = L1_PCI[1]; /* EOF */
 8000880:	7b7b      	ldrb	r3, [r7, #13]
 8000882:	77fb      	strb	r3, [r7, #31]

  HAL_UART_Transmit_IT(&huart2, L1_PDU, L1_PDU_size);
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	2210      	movs	r2, #16
 800088a:	4619      	mov	r1, r3
 800088c:	4803      	ldr	r0, [pc, #12]	; (800089c <L1_send+0x4c>)
 800088e:	f001 fb54 	bl	8001f3a <HAL_UART_Transmit_IT>
}
 8000892:	bf00      	nop
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	2000006c 	.word	0x2000006c

080008a0 <L1_receive>:

void L1_receive(uint8_t L1_PDU[]) {
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b087      	sub	sp, #28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint8_t L1_SDU[L1_SDU_size] = { 0 };
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	811a      	strh	r2, [r3, #8]

  memcpy(L1_SDU, &L1_PDU[1], L1_SDU_size);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	1c5a      	adds	r2, r3, #1
 80008bc:	f107 0308 	add.w	r3, r7, #8
 80008c0:	4614      	mov	r4, r2
 80008c2:	6820      	ldr	r0, [r4, #0]
 80008c4:	6861      	ldr	r1, [r4, #4]
 80008c6:	68a2      	ldr	r2, [r4, #8]
 80008c8:	c307      	stmia	r3!, {r0, r1, r2}
 80008ca:	89a2      	ldrh	r2, [r4, #12]
 80008cc:	801a      	strh	r2, [r3, #0]

  L2_receive(L1_SDU);
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f826 	bl	8000924 <L2_receive>
}
 80008d8:	bf00      	nop
 80008da:	371c      	adds	r7, #28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd90      	pop	{r4, r7, pc}

080008e0 <L2_send>:

void L2_send(uint8_t L2_SDU[]) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint8_t L2_PDU[L2_PDU_size] = { 0 };
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	811a      	strh	r2, [r3, #8]
  
  memcpy(L2_PDU, L2_SDU, L2_SDU_size);
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	220d      	movs	r2, #13
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	4618      	mov	r0, r3
 8000902:	f002 faab 	bl	8002e5c <memcpy>
  L2_PDU[L2_SDU_size] = crc(L2_SDU, L2_SDU_size); /* checksum */
 8000906:	210d      	movs	r1, #13
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff ff69 	bl	80007e0 <crc>
 800090e:	4603      	mov	r3, r0
 8000910:	757b      	strb	r3, [r7, #21]

  L1_send(L2_PDU);
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ff9a 	bl	8000850 <L1_send>
}
 800091c:	bf00      	nop
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <L2_receive>:

void L2_receive(uint8_t L2_PDU[]) {
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b087      	sub	sp, #28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint8_t checksum = L2_PDU[L2_PDU_size - L2_PCI_size];
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	7b5b      	ldrb	r3, [r3, #13]
 8000930:	75fb      	strb	r3, [r7, #23]

  if (crc(L2_PDU, L2_PDU_size) == checksum) {
 8000932:	210e      	movs	r1, #14
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff ff53 	bl	80007e0 <crc>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	7dfb      	ldrb	r3, [r7, #23]
 8000940:	4293      	cmp	r3, r2
 8000942:	d118      	bne.n	8000976 <L2_receive+0x52>
    uint8_t L2_SDU[L2_SDU_size] = { 0 };
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	721a      	strb	r2, [r3, #8]

    memcpy(L2_SDU, &L2_PDU[L2_PCI_size], L2_SDU_size);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	4614      	mov	r4, r2
 800095e:	6820      	ldr	r0, [r4, #0]
 8000960:	6861      	ldr	r1, [r4, #4]
 8000962:	68a2      	ldr	r2, [r4, #8]
 8000964:	c307      	stmia	r3!, {r0, r1, r2}
 8000966:	7b22      	ldrb	r2, [r4, #12]
 8000968:	701a      	strb	r2, [r3, #0]

    L3_receive(L2_SDU);
 800096a:	f107 0308 	add.w	r3, r7, #8
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f834 	bl	80009dc <L3_receive>
  } else { /* discard */
    Error_Handler();
  }
}
 8000974:	e001      	b.n	800097a <L2_receive+0x56>
    Error_Handler();
 8000976:	f000 f8fd 	bl	8000b74 <Error_Handler>
}
 800097a:	bf00      	nop
 800097c:	371c      	adds	r7, #28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd90      	pop	{r4, r7, pc}
	...

08000984 <L3_send>:

void L3_send(uint8_t L3_SDU[]) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint8_t L3_PDU[L3_PDU_size] = { 0 };
 800098c:	2300      	movs	r3, #0
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	721a      	strb	r2, [r3, #8]
  uint8_t L3_PCI[L3_PCI_size] = { 0 };
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]

  L3_PCI[0] = MMCP_MASTER_ADDRESS; /* to */
 80009a0:	2300      	movs	r3, #0
 80009a2:	733b      	strb	r3, [r7, #12]
  L3_PCI[1] = MY_ADDRESS; /* from */
 80009a4:	2303      	movs	r3, #3
 80009a6:	737b      	strb	r3, [r7, #13]
  L3_PCI[2] = MMCP_VERSION; /* version */
 80009a8:	2305      	movs	r3, #5
 80009aa:	73bb      	strb	r3, [r7, #14]
  L3_PCI[3] = cnt; /* hops */
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <L3_send+0x54>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	73fb      	strb	r3, [r7, #15]
 80009b2:	68fb      	ldr	r3, [r7, #12]

  memcpy(L3_PDU, L3_PCI, L3_PCI_size);
 80009b4:	613b      	str	r3, [r7, #16]
  memcpy(&L3_PDU[L3_PCI_size], L3_SDU, L3_SDU_size);
 80009b6:	f107 0310 	add.w	r3, r7, #16
 80009ba:	3304      	adds	r3, #4
 80009bc:	2209      	movs	r2, #9
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 fa4b 	bl	8002e5c <memcpy>

  L2_send(L3_PDU);
 80009c6:	f107 0310 	add.w	r3, r7, #16
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ff88 	bl	80008e0 <L2_send>
}
 80009d0:	bf00      	nop
 80009d2:	3720      	adds	r7, #32
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	200000c0 	.word	0x200000c0

080009dc <L3_receive>:

void L3_receive(uint8_t L3_PDU[]) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint8_t L3_PCI[L3_PCI_size] = { 0 };
 80009e4:	2300      	movs	r3, #0
 80009e6:	61bb      	str	r3, [r7, #24]
  uint8_t L3_SDU[L3_SDU_size] = { 0 };
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	711a      	strb	r2, [r3, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]

  memcpy(L3_PCI, L3_PDU, L3_PCI_size);
 80009fa:	61bb      	str	r3, [r7, #24]
  memcpy(L3_SDU, &L3_PDU[L3_PCI_size], L2_SDU_size);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	1d19      	adds	r1, r3, #4
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	220d      	movs	r2, #13
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 fa28 	bl	8002e5c <memcpy>

  uint8_t to = L3_PCI[0];
 8000a0c:	7e3b      	ldrb	r3, [r7, #24]
 8000a0e:	77fb      	strb	r3, [r7, #31]
  uint8_t from = L3_PCI[1];
 8000a10:	7e7b      	ldrb	r3, [r7, #25]
 8000a12:	77bb      	strb	r3, [r7, #30]
  uint8_t version = L3_PCI[2];
 8000a14:	7ebb      	ldrb	r3, [r7, #26]
 8000a16:	777b      	strb	r3, [r7, #29]
  //uint8_t hops = L3_PCI[3];

  if (to == 0 && from == 0) Error_Handler(); /* discard */
 8000a18:	7ffb      	ldrb	r3, [r7, #31]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d104      	bne.n	8000a28 <L3_receive+0x4c>
 8000a1e:	7fbb      	ldrb	r3, [r7, #30]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d101      	bne.n	8000a28 <L3_receive+0x4c>
 8000a24:	f000 f8a6 	bl	8000b74 <Error_Handler>
  
  if (to == 0) { /* forward */
 8000a28:	7ffb      	ldrb	r3, [r7, #31]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d108      	bne.n	8000a40 <L3_receive+0x64>
    cnt++; 
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <L3_receive+0x90>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	3301      	adds	r3, #1
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <L3_receive+0x90>)
 8000a38:	701a      	strb	r2, [r3, #0]
    L2_send(L3_PDU);
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff ff50 	bl	80008e0 <L2_send>
  } 

  if (to == MY_ADDRESS && from == MMCP_MASTER_ADDRESS && version == MMCP_VERSION) { /* pass to next layer */
 8000a40:	7ffb      	ldrb	r3, [r7, #31]
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	d10b      	bne.n	8000a5e <L3_receive+0x82>
 8000a46:	7fbb      	ldrb	r3, [r7, #30]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d108      	bne.n	8000a5e <L3_receive+0x82>
 8000a4c:	7f7b      	ldrb	r3, [r7, #29]
 8000a4e:	2b05      	cmp	r3, #5
 8000a50:	d105      	bne.n	8000a5e <L3_receive+0x82>
    L7_receive(L3_SDU); 
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f82e 	bl	8000ab8 <L7_receive>
 8000a5c:	e002      	b.n	8000a64 <L3_receive+0x88>
  } else { /* discard */
    Error_Handler();
 8000a5e:	f000 f889 	bl	8000b74 <Error_Handler>
  }
}
 8000a62:	bf00      	nop
 8000a64:	bf00      	nop
 8000a66:	3720      	adds	r7, #32
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200000c0 	.word	0x200000c0

08000a70 <L7_send>:

void L7_send(uint8_t ID, uint8_t L7_SDU[]) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	71fb      	strb	r3, [r7, #7]
  uint8_t L7_PDU[L7_PDU_size] = { 0 };
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	711a      	strb	r2, [r3, #4]
  uint8_t L7_PCI[L7_PCI_size] = { 0 };
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	723b      	strb	r3, [r7, #8]

  L7_PCI[0] = ID;
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	723b      	strb	r3, [r7, #8]
 8000a92:	7a3b      	ldrb	r3, [r7, #8]

  memcpy(L7_PDU, L7_PCI, L7_PCI_size);
 8000a94:	733b      	strb	r3, [r7, #12]
  memcpy(&L7_PDU[L7_PCI_size], L7_SDU, L7_SDU_size);
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	2208      	movs	r2, #8
 8000a9e:	6839      	ldr	r1, [r7, #0]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f002 f9db 	bl	8002e5c <memcpy>

  L3_send(L7_PDU);
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ff6a 	bl	8000984 <L3_send>
}
 8000ab0:	bf00      	nop
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <L7_receive>:

void L7_receive(uint8_t L7_PDU[]) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint8_t L7_SDU[L7_SDU_size] = { 0 };
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61bb      	str	r3, [r7, #24]
  uint8_t ApNr = L7_PDU[0];
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	77fb      	strb	r3, [r7, #31]

  memcpy(L7_SDU, &L7_PDU[1], L7_SDU_size);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	1c5a      	adds	r2, r3, #1
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	6810      	ldr	r0, [r2, #0]
 8000ad8:	6851      	ldr	r1, [r2, #4]
 8000ada:	c303      	stmia	r3!, {r0, r1}

  switch (ApNr) {
 8000adc:	7ffb      	ldrb	r3, [r7, #31]
 8000ade:	3b64      	subs	r3, #100	; 0x64
 8000ae0:	2b03      	cmp	r3, #3
 8000ae2:	d835      	bhi.n	8000b50 <L7_receive+0x98>
 8000ae4:	a201      	add	r2, pc, #4	; (adr r2, 8000aec <L7_receive+0x34>)
 8000ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aea:	bf00      	nop
 8000aec:	08000afd 	.word	0x08000afd
 8000af0:	08000b1b 	.word	0x08000b1b
 8000af4:	08000b29 	.word	0x08000b29
 8000af8:	08000b43 	.word	0x08000b43
    case 100: /* set LED */
      if (L7_SDU[7] != 0) { /* set LED on */
 8000afc:	7efb      	ldrb	r3, [r7, #27]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d005      	beq.n	8000b0e <L7_receive+0x56>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	2120      	movs	r1, #32
 8000b06:	4819      	ldr	r0, [pc, #100]	; (8000b6c <L7_receive+0xb4>)
 8000b08:	f000 fd18 	bl	800153c <HAL_GPIO_WritePin>
      } else { /* set LED off */
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
      }
      break;
 8000b0c:	e023      	b.n	8000b56 <L7_receive+0x9e>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2120      	movs	r1, #32
 8000b12:	4816      	ldr	r0, [pc, #88]	; (8000b6c <L7_receive+0xb4>)
 8000b14:	f000 fd12 	bl	800153c <HAL_GPIO_WritePin>
      break;
 8000b18:	e01d      	b.n	8000b56 <L7_receive+0x9e>

    case 101: /* read number of keystrokes */
      L7_SDU[7] = cnt;
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <L7_receive+0xb8>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	76fb      	strb	r3, [r7, #27]
      cnt = 0;
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <L7_receive+0xb8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
      break;
 8000b26:	e016      	b.n	8000b56 <L7_receive+0x9e>

    case 102: /* read out and return UID */
      uint32_t uid_part1 = HAL_GetUIDw0();
 8000b28:	f000 f9bc 	bl	8000ea4 <HAL_GetUIDw0>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	613b      	str	r3, [r7, #16]
      uint32_t uid_part2 = HAL_GetUIDw1();
 8000b30:	f000 f9c4 	bl	8000ebc <HAL_GetUIDw1>
 8000b34:	4603      	mov	r3, r0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	693b      	ldr	r3, [r7, #16]

      memcpy(L7_SDU, &uid_part1, sizeof(uid_part1));
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
      memcpy(&L7_SDU[4], &uid_part2, sizeof(uid_part2));
 8000b3e:	61bb      	str	r3, [r7, #24]
      break;
 8000b40:	e009      	b.n	8000b56 <L7_receive+0x9e>

    case 103: /* read out and return UID */
      uint32_t uid_part3 = HAL_GetUIDw2();
 8000b42:	f000 f9c7 	bl	8000ed4 <HAL_GetUIDw2>
 8000b46:	4603      	mov	r3, r0
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]

      memcpy(L7_SDU, &uid_part3, sizeof(uid_part3));
 8000b4c:	617b      	str	r3, [r7, #20]
      break;
 8000b4e:	e002      	b.n	8000b56 <L7_receive+0x9e>

    default:
      Error_Handler();
 8000b50:	f000 f810 	bl	8000b74 <Error_Handler>
      break;
 8000b54:	bf00      	nop
  }

  L7_send(ApNr, L7_SDU);
 8000b56:	f107 0214 	add.w	r2, r7, #20
 8000b5a:	7ffb      	ldrb	r3, [r7, #31]
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff86 	bl	8000a70 <L7_send>
}
 8000b64:	bf00      	nop
 8000b66:	3720      	adds	r7, #32
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	200000c0 	.word	0x200000c0

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  dataTransmitted = true;
 8000b78:	4b02      	ldr	r3, [pc, #8]	; (8000b84 <Error_Handler+0x10>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7e:	b672      	cpsid	i
}
 8000b80:	bf00      	nop
  __disable_irq();
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <Error_Handler+0xe>
 8000b84:	200000d5 	.word	0x200000d5

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a0f      	ldr	r2, [pc, #60]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bc6:	2007      	movs	r0, #7
 8000bc8:	f000 fa60 	bl	800108c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	; 0x30
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a36      	ldr	r2, [pc, #216]	; (8000cd0 <HAL_UART_MspInit+0xf8>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d135      	bne.n	8000c66 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
 8000bfe:	4b35      	ldr	r3, [pc, #212]	; (8000cd4 <HAL_UART_MspInit+0xfc>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_UART_MspInit+0xfc>)
 8000c04:	f043 0310 	orr.w	r3, r3, #16
 8000c08:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0a:	4b32      	ldr	r3, [pc, #200]	; (8000cd4 <HAL_UART_MspInit+0xfc>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	f003 0310 	and.w	r3, r3, #16
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <HAL_UART_MspInit+0xfc>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a2d      	ldr	r2, [pc, #180]	; (8000cd4 <HAL_UART_MspInit+0xfc>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <HAL_UART_MspInit+0xfc>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c44:	2307      	movs	r3, #7
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4822      	ldr	r0, [pc, #136]	; (8000cd8 <HAL_UART_MspInit+0x100>)
 8000c50:	f000 faf0 	bl	8001234 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2100      	movs	r1, #0
 8000c58:	2025      	movs	r0, #37	; 0x25
 8000c5a:	f000 fa22 	bl	80010a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c5e:	2025      	movs	r0, #37	; 0x25
 8000c60:	f000 fa3b 	bl	80010da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c64:	e030      	b.n	8000cc8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <HAL_UART_MspInit+0x104>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d12b      	bne.n	8000cc8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c70:	2300      	movs	r3, #0
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <HAL_UART_MspInit+0xfc>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	4a16      	ldr	r2, [pc, #88]	; (8000cd4 <HAL_UART_MspInit+0xfc>)
 8000c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <HAL_UART_MspInit+0xfc>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <HAL_UART_MspInit+0xfc>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	4a0f      	ldr	r2, [pc, #60]	; (8000cd4 <HAL_UART_MspInit+0xfc>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <HAL_UART_MspInit+0xfc>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ca8:	230c      	movs	r3, #12
 8000caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb8:	2307      	movs	r3, #7
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <HAL_UART_MspInit+0x100>)
 8000cc4:	f000 fab6 	bl	8001234 <HAL_GPIO_Init>
}
 8000cc8:	bf00      	nop
 8000cca:	3730      	adds	r7, #48	; 0x30
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40011000 	.word	0x40011000
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020000 	.word	0x40020000
 8000cdc:	40004400 	.word	0x40004400

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <NMI_Handler+0x4>

08000ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <UsageFault_Handler+0x4>

08000cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2c:	f000 f89a 	bl	8000e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <USART1_IRQHandler+0x10>)
 8000d3a:	f001 f973 	bl	8002024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000028 	.word	0x20000028

08000d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <SystemInit+0x20>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <SystemInit+0x20>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d70:	480d      	ldr	r0, [pc, #52]	; (8000da8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d72:	490e      	ldr	r1, [pc, #56]	; (8000dac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d74:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d88:	4c0b      	ldr	r4, [pc, #44]	; (8000db8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d96:	f7ff ffd7 	bl	8000d48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f002 f83b 	bl	8002e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9e:	f7ff fb97 	bl	80004d0 <main>
  bx  lr    
 8000da2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000da4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000db0:	08002eb8 	.word	0x08002eb8
  ldr r2, =_sbss
 8000db4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000db8:	200000dc 	.word	0x200000dc

08000dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC_IRQHandler>
	...

08000dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <HAL_Init+0x40>)
 8000dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_Init+0x40>)
 8000dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_Init+0x40>)
 8000de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f94f 	bl	800108c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f000 f808 	bl	8000e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df4:	f7ff fec8 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023c00 	.word	0x40023c00

08000e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x54>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_InitTick+0x58>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f967 	bl	80010f6 <HAL_SYSTICK_Config>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00e      	b.n	8000e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b0f      	cmp	r3, #15
 8000e36:	d80a      	bhi.n	8000e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e40:	f000 f92f 	bl	80010a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e44:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <HAL_InitTick+0x5c>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e000      	b.n	8000e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000004 	.word	0x20000004

08000e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x20>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x24>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <HAL_IncTick+0x24>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008
 8000e88:	200000d8 	.word	0x200000d8

08000e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <HAL_GetTick+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	200000d8 	.word	0x200000d8

08000ea4 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_GetUIDw0+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	1fff7a10 	.word	0x1fff7a10

08000ebc <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <HAL_GetUIDw1+0x14>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	1fff7a14 	.word	0x1fff7a14

08000ed4 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetUIDw2+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	1fff7a18 	.word	0x1fff7a18

08000eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1e:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	60d3      	str	r3, [r2, #12]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0b      	blt.n	8000f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4907      	ldr	r1, [pc, #28]	; (8000f88 <__NVIC_EnableIRQ+0x38>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	2001      	movs	r0, #1
 8000f72:	fa00 f202 	lsl.w	r2, r0, r2
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	; (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43da      	mvns	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001028:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43d9      	mvns	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	4313      	orrs	r3, r2
         );
}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001058:	d301      	bcc.n	800105e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105a:	2301      	movs	r3, #1
 800105c:	e00f      	b.n	800107e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <SysTick_Config+0x40>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001066:	210f      	movs	r1, #15
 8001068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800106c:	f7ff ff8e 	bl	8000f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <SysTick_Config+0x40>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <SysTick_Config+0x40>)
 8001078:	2207      	movs	r2, #7
 800107a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	e000e010 	.word	0xe000e010

0800108c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff29 	bl	8000eec <__NVIC_SetPriorityGrouping>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b4:	f7ff ff3e 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 80010b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	6978      	ldr	r0, [r7, #20]
 80010c0:	f7ff ff8e 	bl	8000fe0 <NVIC_EncodePriority>
 80010c4:	4602      	mov	r2, r0
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff5d 	bl	8000f8c <__NVIC_SetPriority>
}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff31 	bl	8000f50 <__NVIC_EnableIRQ>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ffa2 	bl	8001048 <SysTick_Config>
 8001104:	4603      	mov	r3, r0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800111c:	f7ff feb6 	bl	8000e8c <HAL_GetTick>
 8001120:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d008      	beq.n	8001140 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e052      	b.n	80011e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 0216 	bic.w	r2, r2, #22
 800114e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	695a      	ldr	r2, [r3, #20]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800115e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	2b00      	cmp	r3, #0
 8001166:	d103      	bne.n	8001170 <HAL_DMA_Abort+0x62>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800116c:	2b00      	cmp	r3, #0
 800116e:	d007      	beq.n	8001180 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0208 	bic.w	r2, r2, #8
 800117e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0201 	bic.w	r2, r2, #1
 800118e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001190:	e013      	b.n	80011ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001192:	f7ff fe7b 	bl	8000e8c <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b05      	cmp	r3, #5
 800119e:	d90c      	bls.n	80011ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2220      	movs	r2, #32
 80011a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2203      	movs	r2, #3
 80011aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e015      	b.n	80011e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1e4      	bne.n	8001192 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011cc:	223f      	movs	r2, #63	; 0x3f
 80011ce:	409a      	lsls	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d004      	beq.n	800120c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e00c      	b.n	8001226 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2205      	movs	r2, #5
 8001210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0201 	bic.w	r2, r2, #1
 8001222:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
 800124e:	e159      	b.n	8001504 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001250:	2201      	movs	r2, #1
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	429a      	cmp	r2, r3
 800126a:	f040 8148 	bne.w	80014fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	2b01      	cmp	r3, #1
 8001278:	d005      	beq.n	8001286 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001282:	2b02      	cmp	r3, #2
 8001284:	d130      	bne.n	80012e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	2203      	movs	r2, #3
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	68da      	ldr	r2, [r3, #12]
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012bc:	2201      	movs	r2, #1
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	f003 0201 	and.w	r2, r3, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b03      	cmp	r3, #3
 80012f2:	d017      	beq.n	8001324 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	2203      	movs	r2, #3
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d123      	bne.n	8001378 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	08da      	lsrs	r2, r3, #3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3208      	adds	r2, #8
 8001338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	220f      	movs	r2, #15
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	691a      	ldr	r2, [r3, #16]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	08da      	lsrs	r2, r3, #3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3208      	adds	r2, #8
 8001372:	69b9      	ldr	r1, [r7, #24]
 8001374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0203 	and.w	r2, r3, #3
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 80a2 	beq.w	80014fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b57      	ldr	r3, [pc, #348]	; (800151c <HAL_GPIO_Init+0x2e8>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	4a56      	ldr	r2, [pc, #344]	; (800151c <HAL_GPIO_Init+0x2e8>)
 80013c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ca:	4b54      	ldr	r3, [pc, #336]	; (800151c <HAL_GPIO_Init+0x2e8>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013d6:	4a52      	ldr	r2, [pc, #328]	; (8001520 <HAL_GPIO_Init+0x2ec>)
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3302      	adds	r3, #2
 80013de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	220f      	movs	r2, #15
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a49      	ldr	r2, [pc, #292]	; (8001524 <HAL_GPIO_Init+0x2f0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d019      	beq.n	8001436 <HAL_GPIO_Init+0x202>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a48      	ldr	r2, [pc, #288]	; (8001528 <HAL_GPIO_Init+0x2f4>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d013      	beq.n	8001432 <HAL_GPIO_Init+0x1fe>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a47      	ldr	r2, [pc, #284]	; (800152c <HAL_GPIO_Init+0x2f8>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d00d      	beq.n	800142e <HAL_GPIO_Init+0x1fa>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a46      	ldr	r2, [pc, #280]	; (8001530 <HAL_GPIO_Init+0x2fc>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d007      	beq.n	800142a <HAL_GPIO_Init+0x1f6>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a45      	ldr	r2, [pc, #276]	; (8001534 <HAL_GPIO_Init+0x300>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d101      	bne.n	8001426 <HAL_GPIO_Init+0x1f2>
 8001422:	2304      	movs	r3, #4
 8001424:	e008      	b.n	8001438 <HAL_GPIO_Init+0x204>
 8001426:	2307      	movs	r3, #7
 8001428:	e006      	b.n	8001438 <HAL_GPIO_Init+0x204>
 800142a:	2303      	movs	r3, #3
 800142c:	e004      	b.n	8001438 <HAL_GPIO_Init+0x204>
 800142e:	2302      	movs	r3, #2
 8001430:	e002      	b.n	8001438 <HAL_GPIO_Init+0x204>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <HAL_GPIO_Init+0x204>
 8001436:	2300      	movs	r3, #0
 8001438:	69fa      	ldr	r2, [r7, #28]
 800143a:	f002 0203 	and.w	r2, r2, #3
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	4093      	lsls	r3, r2
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001448:	4935      	ldr	r1, [pc, #212]	; (8001520 <HAL_GPIO_Init+0x2ec>)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	3302      	adds	r3, #2
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001456:	4b38      	ldr	r3, [pc, #224]	; (8001538 <HAL_GPIO_Init+0x304>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800147a:	4a2f      	ldr	r2, [pc, #188]	; (8001538 <HAL_GPIO_Init+0x304>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001480:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <HAL_GPIO_Init+0x304>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a4:	4a24      	ldr	r2, [pc, #144]	; (8001538 <HAL_GPIO_Init+0x304>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014aa:	4b23      	ldr	r3, [pc, #140]	; (8001538 <HAL_GPIO_Init+0x304>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ce:	4a1a      	ldr	r2, [pc, #104]	; (8001538 <HAL_GPIO_Init+0x304>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d4:	4b18      	ldr	r3, [pc, #96]	; (8001538 <HAL_GPIO_Init+0x304>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014f8:	4a0f      	ldr	r2, [pc, #60]	; (8001538 <HAL_GPIO_Init+0x304>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3301      	adds	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	2b0f      	cmp	r3, #15
 8001508:	f67f aea2 	bls.w	8001250 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800
 8001520:	40013800 	.word	0x40013800
 8001524:	40020000 	.word	0x40020000
 8001528:	40020400 	.word	0x40020400
 800152c:	40020800 	.word	0x40020800
 8001530:	40020c00 	.word	0x40020c00
 8001534:	40021000 	.word	0x40021000
 8001538:	40013c00 	.word	0x40013c00

0800153c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]
 8001548:	4613      	mov	r3, r2
 800154a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800154c:	787b      	ldrb	r3, [r7, #1]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001552:	887a      	ldrh	r2, [r7, #2]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001558:	e003      	b.n	8001562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	041a      	lsls	r2, r3, #16
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	619a      	str	r2, [r3, #24]
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e267      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d075      	beq.n	800167a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800158e:	4b88      	ldr	r3, [pc, #544]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	2b04      	cmp	r3, #4
 8001598:	d00c      	beq.n	80015b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800159a:	4b85      	ldr	r3, [pc, #532]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d112      	bne.n	80015cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015a6:	4b82      	ldr	r3, [pc, #520]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015b2:	d10b      	bne.n	80015cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b4:	4b7e      	ldr	r3, [pc, #504]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d05b      	beq.n	8001678 <HAL_RCC_OscConfig+0x108>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d157      	bne.n	8001678 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e242      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d4:	d106      	bne.n	80015e4 <HAL_RCC_OscConfig+0x74>
 80015d6:	4b76      	ldr	r3, [pc, #472]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a75      	ldr	r2, [pc, #468]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e01d      	b.n	8001620 <HAL_RCC_OscConfig+0xb0>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015ec:	d10c      	bne.n	8001608 <HAL_RCC_OscConfig+0x98>
 80015ee:	4b70      	ldr	r3, [pc, #448]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a6f      	ldr	r2, [pc, #444]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	4b6d      	ldr	r3, [pc, #436]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a6c      	ldr	r2, [pc, #432]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	e00b      	b.n	8001620 <HAL_RCC_OscConfig+0xb0>
 8001608:	4b69      	ldr	r3, [pc, #420]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a68      	ldr	r2, [pc, #416]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 800160e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b66      	ldr	r3, [pc, #408]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a65      	ldr	r2, [pc, #404]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 800161a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d013      	beq.n	8001650 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff fc30 	bl	8000e8c <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001630:	f7ff fc2c 	bl	8000e8c <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b64      	cmp	r3, #100	; 0x64
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e207      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	4b5b      	ldr	r3, [pc, #364]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0xc0>
 800164e:	e014      	b.n	800167a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff fc1c 	bl	8000e8c <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001658:	f7ff fc18 	bl	8000e8c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b64      	cmp	r3, #100	; 0x64
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e1f3      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166a:	4b51      	ldr	r3, [pc, #324]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0xe8>
 8001676:	e000      	b.n	800167a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d063      	beq.n	800174e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001686:	4b4a      	ldr	r3, [pc, #296]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00b      	beq.n	80016aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001692:	4b47      	ldr	r3, [pc, #284]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800169a:	2b08      	cmp	r3, #8
 800169c:	d11c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800169e:	4b44      	ldr	r3, [pc, #272]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d116      	bne.n	80016d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016aa:	4b41      	ldr	r3, [pc, #260]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d005      	beq.n	80016c2 <HAL_RCC_OscConfig+0x152>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d001      	beq.n	80016c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e1c7      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c2:	4b3b      	ldr	r3, [pc, #236]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4937      	ldr	r1, [pc, #220]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d6:	e03a      	b.n	800174e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d020      	beq.n	8001722 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e0:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <HAL_RCC_OscConfig+0x244>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e6:	f7ff fbd1 	bl	8000e8c <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ee:	f7ff fbcd 	bl	8000e8c <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e1a8      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001700:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170c:	4b28      	ldr	r3, [pc, #160]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4925      	ldr	r1, [pc, #148]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]
 8001720:	e015      	b.n	800174e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001722:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <HAL_RCC_OscConfig+0x244>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff fbb0 	bl	8000e8c <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001730:	f7ff fbac 	bl	8000e8c <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e187      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001742:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	2b00      	cmp	r3, #0
 8001758:	d036      	beq.n	80017c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d016      	beq.n	8001790 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_RCC_OscConfig+0x248>)
 8001764:	2201      	movs	r2, #1
 8001766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001768:	f7ff fb90 	bl	8000e8c <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001770:	f7ff fb8c 	bl	8000e8c <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e167      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x200>
 800178e:	e01b      	b.n	80017c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_RCC_OscConfig+0x248>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001796:	f7ff fb79 	bl	8000e8c <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179c:	e00e      	b.n	80017bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800179e:	f7ff fb75 	bl	8000e8c <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d907      	bls.n	80017bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e150      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
 80017b0:	40023800 	.word	0x40023800
 80017b4:	42470000 	.word	0x42470000
 80017b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017bc:	4b88      	ldr	r3, [pc, #544]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80017be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1ea      	bne.n	800179e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 8097 	beq.w	8001904 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d6:	2300      	movs	r3, #0
 80017d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017da:	4b81      	ldr	r3, [pc, #516]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10f      	bne.n	8001806 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	4b7d      	ldr	r3, [pc, #500]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	4a7c      	ldr	r2, [pc, #496]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f4:	6413      	str	r3, [r2, #64]	; 0x40
 80017f6:	4b7a      	ldr	r3, [pc, #488]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001802:	2301      	movs	r3, #1
 8001804:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001806:	4b77      	ldr	r3, [pc, #476]	; (80019e4 <HAL_RCC_OscConfig+0x474>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180e:	2b00      	cmp	r3, #0
 8001810:	d118      	bne.n	8001844 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001812:	4b74      	ldr	r3, [pc, #464]	; (80019e4 <HAL_RCC_OscConfig+0x474>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a73      	ldr	r2, [pc, #460]	; (80019e4 <HAL_RCC_OscConfig+0x474>)
 8001818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800181e:	f7ff fb35 	bl	8000e8c <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001826:	f7ff fb31 	bl	8000e8c <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e10c      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001838:	4b6a      	ldr	r3, [pc, #424]	; (80019e4 <HAL_RCC_OscConfig+0x474>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d106      	bne.n	800185a <HAL_RCC_OscConfig+0x2ea>
 800184c:	4b64      	ldr	r3, [pc, #400]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 800184e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001850:	4a63      	ldr	r2, [pc, #396]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6713      	str	r3, [r2, #112]	; 0x70
 8001858:	e01c      	b.n	8001894 <HAL_RCC_OscConfig+0x324>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b05      	cmp	r3, #5
 8001860:	d10c      	bne.n	800187c <HAL_RCC_OscConfig+0x30c>
 8001862:	4b5f      	ldr	r3, [pc, #380]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001866:	4a5e      	ldr	r2, [pc, #376]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	6713      	str	r3, [r2, #112]	; 0x70
 800186e:	4b5c      	ldr	r3, [pc, #368]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001872:	4a5b      	ldr	r2, [pc, #364]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6713      	str	r3, [r2, #112]	; 0x70
 800187a:	e00b      	b.n	8001894 <HAL_RCC_OscConfig+0x324>
 800187c:	4b58      	ldr	r3, [pc, #352]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001880:	4a57      	ldr	r2, [pc, #348]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001882:	f023 0301 	bic.w	r3, r3, #1
 8001886:	6713      	str	r3, [r2, #112]	; 0x70
 8001888:	4b55      	ldr	r3, [pc, #340]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 800188a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188c:	4a54      	ldr	r2, [pc, #336]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 800188e:	f023 0304 	bic.w	r3, r3, #4
 8001892:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d015      	beq.n	80018c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189c:	f7ff faf6 	bl	8000e8c <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a2:	e00a      	b.n	80018ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a4:	f7ff faf2 	bl	8000e8c <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e0cb      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ba:	4b49      	ldr	r3, [pc, #292]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0ee      	beq.n	80018a4 <HAL_RCC_OscConfig+0x334>
 80018c6:	e014      	b.n	80018f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c8:	f7ff fae0 	bl	8000e8c <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d0:	f7ff fadc 	bl	8000e8c <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	; 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e0b5      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e6:	4b3e      	ldr	r3, [pc, #248]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80018e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1ee      	bne.n	80018d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d105      	bne.n	8001904 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f8:	4b39      	ldr	r3, [pc, #228]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	4a38      	ldr	r2, [pc, #224]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80018fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001902:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80a1 	beq.w	8001a50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800190e:	4b34      	ldr	r3, [pc, #208]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	2b08      	cmp	r3, #8
 8001918:	d05c      	beq.n	80019d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d141      	bne.n	80019a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001922:	4b31      	ldr	r3, [pc, #196]	; (80019e8 <HAL_RCC_OscConfig+0x478>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7ff fab0 	bl	8000e8c <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001930:	f7ff faac 	bl	8000e8c <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e087      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001942:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69da      	ldr	r2, [r3, #28]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	019b      	lsls	r3, r3, #6
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001964:	085b      	lsrs	r3, r3, #1
 8001966:	3b01      	subs	r3, #1
 8001968:	041b      	lsls	r3, r3, #16
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	061b      	lsls	r3, r3, #24
 8001972:	491b      	ldr	r1, [pc, #108]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001974:	4313      	orrs	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001978:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <HAL_RCC_OscConfig+0x478>)
 800197a:	2201      	movs	r2, #1
 800197c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197e:	f7ff fa85 	bl	8000e8c <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001986:	f7ff fa81 	bl	8000e8c <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e05c      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x416>
 80019a4:	e054      	b.n	8001a50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_RCC_OscConfig+0x478>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff fa6e 	bl	8000e8c <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff fa6a 	bl	8000e8c <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e045      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x444>
 80019d2:	e03d      	b.n	8001a50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d107      	bne.n	80019ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e038      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40007000 	.word	0x40007000
 80019e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <HAL_RCC_OscConfig+0x4ec>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d028      	beq.n	8001a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d121      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d11a      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d111      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	085b      	lsrs	r3, r3, #1
 8001a34:	3b01      	subs	r3, #1
 8001a36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d107      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800

08001a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0cc      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a74:	4b68      	ldr	r3, [pc, #416]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d90c      	bls.n	8001a9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b65      	ldr	r3, [pc, #404]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8a:	4b63      	ldr	r3, [pc, #396]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0b8      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d020      	beq.n	8001aea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ab4:	4b59      	ldr	r3, [pc, #356]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4a58      	ldr	r2, [pc, #352]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001abe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001acc:	4b53      	ldr	r3, [pc, #332]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	4a52      	ldr	r2, [pc, #328]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ad6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad8:	4b50      	ldr	r3, [pc, #320]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	494d      	ldr	r1, [pc, #308]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d044      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	4b47      	ldr	r3, [pc, #284]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d119      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e07f      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d003      	beq.n	8001b1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d107      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1e:	4b3f      	ldr	r3, [pc, #252]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d109      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e06f      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2e:	4b3b      	ldr	r3, [pc, #236]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e067      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b3e:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f023 0203 	bic.w	r2, r3, #3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	4934      	ldr	r1, [pc, #208]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b50:	f7ff f99c 	bl	8000e8c <HAL_GetTick>
 8001b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b56:	e00a      	b.n	8001b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b58:	f7ff f998 	bl	8000e8c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e04f      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	4b2b      	ldr	r3, [pc, #172]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 020c 	and.w	r2, r3, #12
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d1eb      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b80:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d20c      	bcs.n	8001ba8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b96:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e032      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d008      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	4916      	ldr	r1, [pc, #88]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d009      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	490e      	ldr	r1, [pc, #56]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001be6:	f000 f821 	bl	8001c2c <HAL_RCC_GetSysClockFreq>
 8001bea:	4602      	mov	r2, r0
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	490a      	ldr	r1, [pc, #40]	; (8001c20 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	5ccb      	ldrb	r3, [r1, r3]
 8001bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfe:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff f8fc 	bl	8000e04 <HAL_InitTick>

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40023c00 	.word	0x40023c00
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	08002e90 	.word	0x08002e90
 8001c24:	20000000 	.word	0x20000000
 8001c28:	20000004 	.word	0x20000004

08001c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c30:	b094      	sub	sp, #80	; 0x50
 8001c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	647b      	str	r3, [r7, #68]	; 0x44
 8001c38:	2300      	movs	r3, #0
 8001c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c44:	4b79      	ldr	r3, [pc, #484]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 030c 	and.w	r3, r3, #12
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d00d      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0x40>
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	f200 80e1 	bhi.w	8001e18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <HAL_RCC_GetSysClockFreq+0x34>
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d003      	beq.n	8001c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c5e:	e0db      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c60:	4b73      	ldr	r3, [pc, #460]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c64:	e0db      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c66:	4b73      	ldr	r3, [pc, #460]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c6a:	e0d8      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c6c:	4b6f      	ldr	r3, [pc, #444]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c76:	4b6d      	ldr	r3, [pc, #436]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d063      	beq.n	8001d4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c82:	4b6a      	ldr	r3, [pc, #424]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	099b      	lsrs	r3, r3, #6
 8001c88:	2200      	movs	r2, #0
 8001c8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c94:	633b      	str	r3, [r7, #48]	; 0x30
 8001c96:	2300      	movs	r3, #0
 8001c98:	637b      	str	r3, [r7, #52]	; 0x34
 8001c9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c9e:	4622      	mov	r2, r4
 8001ca0:	462b      	mov	r3, r5
 8001ca2:	f04f 0000 	mov.w	r0, #0
 8001ca6:	f04f 0100 	mov.w	r1, #0
 8001caa:	0159      	lsls	r1, r3, #5
 8001cac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cb0:	0150      	lsls	r0, r2, #5
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4621      	mov	r1, r4
 8001cb8:	1a51      	subs	r1, r2, r1
 8001cba:	6139      	str	r1, [r7, #16]
 8001cbc:	4629      	mov	r1, r5
 8001cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cd0:	4659      	mov	r1, fp
 8001cd2:	018b      	lsls	r3, r1, #6
 8001cd4:	4651      	mov	r1, sl
 8001cd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cda:	4651      	mov	r1, sl
 8001cdc:	018a      	lsls	r2, r1, #6
 8001cde:	4651      	mov	r1, sl
 8001ce0:	ebb2 0801 	subs.w	r8, r2, r1
 8001ce4:	4659      	mov	r1, fp
 8001ce6:	eb63 0901 	sbc.w	r9, r3, r1
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cfe:	4690      	mov	r8, r2
 8001d00:	4699      	mov	r9, r3
 8001d02:	4623      	mov	r3, r4
 8001d04:	eb18 0303 	adds.w	r3, r8, r3
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	462b      	mov	r3, r5
 8001d0c:	eb49 0303 	adc.w	r3, r9, r3
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d1e:	4629      	mov	r1, r5
 8001d20:	024b      	lsls	r3, r1, #9
 8001d22:	4621      	mov	r1, r4
 8001d24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d28:	4621      	mov	r1, r4
 8001d2a:	024a      	lsls	r2, r1, #9
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d32:	2200      	movs	r2, #0
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d3c:	f7fe fa4a 	bl	80001d4 <__aeabi_uldivmod>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4613      	mov	r3, r2
 8001d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d48:	e058      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d4a:	4b38      	ldr	r3, [pc, #224]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	099b      	lsrs	r3, r3, #6
 8001d50:	2200      	movs	r2, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	4611      	mov	r1, r2
 8001d56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d5a:	623b      	str	r3, [r7, #32]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d64:	4642      	mov	r2, r8
 8001d66:	464b      	mov	r3, r9
 8001d68:	f04f 0000 	mov.w	r0, #0
 8001d6c:	f04f 0100 	mov.w	r1, #0
 8001d70:	0159      	lsls	r1, r3, #5
 8001d72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d76:	0150      	lsls	r0, r2, #5
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4641      	mov	r1, r8
 8001d7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d82:	4649      	mov	r1, r9
 8001d84:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d9c:	ebb2 040a 	subs.w	r4, r2, sl
 8001da0:	eb63 050b 	sbc.w	r5, r3, fp
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	00eb      	lsls	r3, r5, #3
 8001dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001db2:	00e2      	lsls	r2, r4, #3
 8001db4:	4614      	mov	r4, r2
 8001db6:	461d      	mov	r5, r3
 8001db8:	4643      	mov	r3, r8
 8001dba:	18e3      	adds	r3, r4, r3
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	464b      	mov	r3, r9
 8001dc0:	eb45 0303 	adc.w	r3, r5, r3
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	028b      	lsls	r3, r1, #10
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ddc:	4621      	mov	r1, r4
 8001dde:	028a      	lsls	r2, r1, #10
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001de6:	2200      	movs	r2, #0
 8001de8:	61bb      	str	r3, [r7, #24]
 8001dea:	61fa      	str	r2, [r7, #28]
 8001dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001df0:	f7fe f9f0 	bl	80001d4 <__aeabi_uldivmod>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4613      	mov	r3, r2
 8001dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	0c1b      	lsrs	r3, r3, #16
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	3301      	adds	r3, #1
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e16:	e002      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3750      	adds	r7, #80	; 0x50
 8001e24:	46bd      	mov	sp, r7
 8001e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	00f42400 	.word	0x00f42400
 8001e34:	007a1200 	.word	0x007a1200

08001e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000000 	.word	0x20000000

08001e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e54:	f7ff fff0 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	0a9b      	lsrs	r3, r3, #10
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	4903      	ldr	r1, [pc, #12]	; (8001e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e66:	5ccb      	ldrb	r3, [r1, r3]
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40023800 	.word	0x40023800
 8001e74:	08002ea0 	.word	0x08002ea0

08001e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e7c:	f7ff ffdc 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 8001e80:	4602      	mov	r2, r0
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	0b5b      	lsrs	r3, r3, #13
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	4903      	ldr	r1, [pc, #12]	; (8001e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e8e:	5ccb      	ldrb	r3, [r1, r3]
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	08002ea0 	.word	0x08002ea0

08001ea0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e03f      	b.n	8001f32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe fe86 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2224      	movs	r2, #36	; 0x24
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ee2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fd19 	bl	800291c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	695a      	ldr	r2, [r3, #20]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b085      	sub	sp, #20
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	4613      	mov	r3, r2
 8001f46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b20      	cmp	r3, #32
 8001f52:	d130      	bne.n	8001fb6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <HAL_UART_Transmit_IT+0x26>
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e029      	b.n	8001fb8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_UART_Transmit_IT+0x38>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e022      	b.n	8001fb8 <HAL_UART_Transmit_IT+0x7e>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	88fa      	ldrh	r2, [r7, #6]
 8001f84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	88fa      	ldrh	r2, [r7, #6]
 8001f8a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2221      	movs	r2, #33	; 0x21
 8001f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fb0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e000      	b.n	8001fb8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001fb6:	2302      	movs	r3, #2
  }
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	d11d      	bne.n	800201a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d002      	beq.n	8001fea <HAL_UART_Receive_IT+0x26>
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e016      	b.n	800201c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_UART_Receive_IT+0x38>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e00f      	b.n	800201c <HAL_UART_Receive_IT+0x58>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	461a      	mov	r2, r3
 800200e:	68b9      	ldr	r1, [r7, #8]
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 faab 	bl	800256c <UART_Start_Receive_IT>
 8002016:	4603      	mov	r3, r0
 8002018:	e000      	b.n	800201c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800201a:	2302      	movs	r3, #2
  }
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b0ba      	sub	sp, #232	; 0xe8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002050:	2300      	movs	r3, #0
 8002052:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10f      	bne.n	800208a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800206a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	2b00      	cmp	r3, #0
 8002074:	d009      	beq.n	800208a <HAL_UART_IRQHandler+0x66>
 8002076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800207a:	f003 0320 	and.w	r3, r3, #32
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 fb8f 	bl	80027a6 <UART_Receive_IT>
      return;
 8002088:	e256      	b.n	8002538 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800208a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 80de 	beq.w	8002250 <HAL_UART_IRQHandler+0x22c>
 8002094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d106      	bne.n	80020ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80d1 	beq.w	8002250 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00b      	beq.n	80020d2 <HAL_UART_IRQHandler+0xae>
 80020ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f043 0201 	orr.w	r2, r3, #1
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00b      	beq.n	80020f6 <HAL_UART_IRQHandler+0xd2>
 80020de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f043 0202 	orr.w	r2, r3, #2
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00b      	beq.n	800211a <HAL_UART_IRQHandler+0xf6>
 8002102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f043 0204 	orr.w	r2, r3, #4
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800211a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d011      	beq.n	800214a <HAL_UART_IRQHandler+0x126>
 8002126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800212a:	f003 0320 	and.w	r3, r3, #32
 800212e:	2b00      	cmp	r3, #0
 8002130:	d105      	bne.n	800213e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d005      	beq.n	800214a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f043 0208 	orr.w	r2, r3, #8
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 81ed 	beq.w	800252e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002158:	f003 0320 	and.w	r3, r3, #32
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_UART_IRQHandler+0x14e>
 8002160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002164:	f003 0320 	and.w	r3, r3, #32
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 fb1a 	bl	80027a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217c:	2b40      	cmp	r3, #64	; 0x40
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d103      	bne.n	800219e <HAL_UART_IRQHandler+0x17a>
 8002196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800219a:	2b00      	cmp	r3, #0
 800219c:	d04f      	beq.n	800223e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fa22 	bl	80025e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ae:	2b40      	cmp	r3, #64	; 0x40
 80021b0:	d141      	bne.n	8002236 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	3314      	adds	r3, #20
 80021b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021c0:	e853 3f00 	ldrex	r3, [r3]
 80021c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80021c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	3314      	adds	r3, #20
 80021da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80021de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80021e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80021ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80021ee:	e841 2300 	strex	r3, r2, [r1]
 80021f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80021f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1d9      	bne.n	80021b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002202:	2b00      	cmp	r3, #0
 8002204:	d013      	beq.n	800222e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220a:	4a7d      	ldr	r2, [pc, #500]	; (8002400 <HAL_UART_IRQHandler+0x3dc>)
 800220c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe ffeb 	bl	80011ee <HAL_DMA_Abort_IT>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d016      	beq.n	800224c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002228:	4610      	mov	r0, r2
 800222a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800222c:	e00e      	b.n	800224c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f986 	bl	8002540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002234:	e00a      	b.n	800224c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f982 	bl	8002540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800223c:	e006      	b.n	800224c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f97e 	bl	8002540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800224a:	e170      	b.n	800252e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800224c:	bf00      	nop
    return;
 800224e:	e16e      	b.n	800252e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	2b01      	cmp	r3, #1
 8002256:	f040 814a 	bne.w	80024ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800225a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 8143 	beq.w	80024ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 813c 	beq.w	80024ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002296:	2b40      	cmp	r3, #64	; 0x40
 8002298:	f040 80b4 	bne.w	8002404 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80022a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 8140 	beq.w	8002532 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80022b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80022ba:	429a      	cmp	r2, r3
 80022bc:	f080 8139 	bcs.w	8002532 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80022c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022d2:	f000 8088 	beq.w	80023e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	330c      	adds	r3, #12
 80022dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022e4:	e853 3f00 	ldrex	r3, [r3]
 80022e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80022ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	330c      	adds	r3, #12
 80022fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002302:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002306:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800230a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800230e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002312:	e841 2300 	strex	r3, r2, [r1]
 8002316:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800231a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1d9      	bne.n	80022d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	3314      	adds	r3, #20
 8002328:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800232a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800232c:	e853 3f00 	ldrex	r3, [r3]
 8002330:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002332:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002334:	f023 0301 	bic.w	r3, r3, #1
 8002338:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	3314      	adds	r3, #20
 8002342:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002346:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800234a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800234c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800234e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002352:	e841 2300 	strex	r3, r2, [r1]
 8002356:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1e1      	bne.n	8002322 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	3314      	adds	r3, #20
 8002364:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002366:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002368:	e853 3f00 	ldrex	r3, [r3]
 800236c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800236e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002374:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	3314      	adds	r3, #20
 800237e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002382:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002384:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002386:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002388:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800238a:	e841 2300 	strex	r3, r2, [r1]
 800238e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002390:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1e3      	bne.n	800235e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	330c      	adds	r3, #12
 80023aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ae:	e853 3f00 	ldrex	r3, [r3]
 80023b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80023b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023b6:	f023 0310 	bic.w	r3, r3, #16
 80023ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	330c      	adds	r3, #12
 80023c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80023c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80023ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023d0:	e841 2300 	strex	r3, r2, [r1]
 80023d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80023d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1e3      	bne.n	80023a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe fe94 	bl	800110e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	4619      	mov	r1, r3
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f8ac 	bl	8002554 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023fc:	e099      	b.n	8002532 <HAL_UART_IRQHandler+0x50e>
 80023fe:	bf00      	nop
 8002400:	080026af 	.word	0x080026af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800240c:	b29b      	uxth	r3, r3
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002418:	b29b      	uxth	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 808b 	beq.w	8002536 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002420:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 8086 	beq.w	8002536 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	330c      	adds	r3, #12
 8002430:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002434:	e853 3f00 	ldrex	r3, [r3]
 8002438:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800243a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002440:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	330c      	adds	r3, #12
 800244a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800244e:	647a      	str	r2, [r7, #68]	; 0x44
 8002450:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002452:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002454:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002456:	e841 2300 	strex	r3, r2, [r1]
 800245a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800245c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1e3      	bne.n	800242a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	3314      	adds	r3, #20
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	e853 3f00 	ldrex	r3, [r3]
 8002470:	623b      	str	r3, [r7, #32]
   return(result);
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	3314      	adds	r3, #20
 8002482:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002486:	633a      	str	r2, [r7, #48]	; 0x30
 8002488:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800248a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800248c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800248e:	e841 2300 	strex	r3, r2, [r1]
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1e3      	bne.n	8002462 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2220      	movs	r2, #32
 800249e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	330c      	adds	r3, #12
 80024ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	e853 3f00 	ldrex	r3, [r3]
 80024b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f023 0310 	bic.w	r3, r3, #16
 80024be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	330c      	adds	r3, #12
 80024c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80024cc:	61fa      	str	r2, [r7, #28]
 80024ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d0:	69b9      	ldr	r1, [r7, #24]
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	e841 2300 	strex	r3, r2, [r1]
 80024d8:	617b      	str	r3, [r7, #20]
   return(result);
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1e3      	bne.n	80024a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80024e4:	4619      	mov	r1, r3
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f834 	bl	8002554 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024ec:	e023      	b.n	8002536 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d009      	beq.n	800250e <HAL_UART_IRQHandler+0x4ea>
 80024fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f8e5 	bl	80026d6 <UART_Transmit_IT>
    return;
 800250c:	e014      	b.n	8002538 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800250e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00e      	beq.n	8002538 <HAL_UART_IRQHandler+0x514>
 800251a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800251e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	d008      	beq.n	8002538 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f925 	bl	8002776 <UART_EndTransmit_IT>
    return;
 800252c:	e004      	b.n	8002538 <HAL_UART_IRQHandler+0x514>
    return;
 800252e:	bf00      	nop
 8002530:	e002      	b.n	8002538 <HAL_UART_IRQHandler+0x514>
      return;
 8002532:	bf00      	nop
 8002534:	e000      	b.n	8002538 <HAL_UART_IRQHandler+0x514>
      return;
 8002536:	bf00      	nop
  }
}
 8002538:	37e8      	adds	r7, #232	; 0xe8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop

08002540 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	4613      	mov	r3, r2
 8002578:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	88fa      	ldrh	r2, [r7, #6]
 8002584:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	88fa      	ldrh	r2, [r7, #6]
 800258a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2222      	movs	r2, #34	; 0x22
 8002596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d007      	beq.n	80025ba <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025b8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695a      	ldr	r2, [r3, #20]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f042 0201 	orr.w	r2, r2, #1
 80025c8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0220 	orr.w	r2, r2, #32
 80025d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b095      	sub	sp, #84	; 0x54
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	330c      	adds	r3, #12
 80025f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fa:	e853 3f00 	ldrex	r3, [r3]
 80025fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002602:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	330c      	adds	r3, #12
 800260e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002610:	643a      	str	r2, [r7, #64]	; 0x40
 8002612:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002614:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002616:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002618:	e841 2300 	strex	r3, r2, [r1]
 800261c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800261e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1e5      	bne.n	80025f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	3314      	adds	r3, #20
 800262a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	e853 3f00 	ldrex	r3, [r3]
 8002632:	61fb      	str	r3, [r7, #28]
   return(result);
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f023 0301 	bic.w	r3, r3, #1
 800263a:	64bb      	str	r3, [r7, #72]	; 0x48
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	3314      	adds	r3, #20
 8002642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002644:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002646:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800264a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800264c:	e841 2300 	strex	r3, r2, [r1]
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1e5      	bne.n	8002624 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	2b01      	cmp	r3, #1
 800265e:	d119      	bne.n	8002694 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	330c      	adds	r3, #12
 8002666:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	e853 3f00 	ldrex	r3, [r3]
 800266e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f023 0310 	bic.w	r3, r3, #16
 8002676:	647b      	str	r3, [r7, #68]	; 0x44
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	330c      	adds	r3, #12
 800267e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002680:	61ba      	str	r2, [r7, #24]
 8002682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002684:	6979      	ldr	r1, [r7, #20]
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	e841 2300 	strex	r3, r2, [r1]
 800268c:	613b      	str	r3, [r7, #16]
   return(result);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1e5      	bne.n	8002660 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80026a2:	bf00      	nop
 80026a4:	3754      	adds	r7, #84	; 0x54
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f7ff ff39 	bl	8002540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b085      	sub	sp, #20
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b21      	cmp	r3, #33	; 0x21
 80026e8:	d13e      	bne.n	8002768 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f2:	d114      	bne.n	800271e <UART_Transmit_IT+0x48>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d110      	bne.n	800271e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002710:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	1c9a      	adds	r2, r3, #2
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	621a      	str	r2, [r3, #32]
 800271c:	e008      	b.n	8002730 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	1c59      	adds	r1, r3, #1
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6211      	str	r1, [r2, #32]
 8002728:	781a      	ldrb	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002734:	b29b      	uxth	r3, r3
 8002736:	3b01      	subs	r3, #1
 8002738:	b29b      	uxth	r3, r3
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	4619      	mov	r1, r3
 800273e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10f      	bne.n	8002764 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002752:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002762:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	e000      	b.n	800276a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002768:	2302      	movs	r3, #2
  }
}
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800278c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7fe f812 	bl	80007c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b08c      	sub	sp, #48	; 0x30
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b22      	cmp	r3, #34	; 0x22
 80027b8:	f040 80ab 	bne.w	8002912 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c4:	d117      	bne.n	80027f6 <UART_Receive_IT+0x50>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d113      	bne.n	80027f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	1c9a      	adds	r2, r3, #2
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28
 80027f4:	e026      	b.n	8002844 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002808:	d007      	beq.n	800281a <UART_Receive_IT+0x74>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10a      	bne.n	8002828 <UART_Receive_IT+0x82>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d106      	bne.n	8002828 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	b2da      	uxtb	r2, r3
 8002822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002824:	701a      	strb	r2, [r3, #0]
 8002826:	e008      	b.n	800283a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002834:	b2da      	uxtb	r2, r3
 8002836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002838:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002848:	b29b      	uxth	r3, r3
 800284a:	3b01      	subs	r3, #1
 800284c:	b29b      	uxth	r3, r3
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	4619      	mov	r1, r3
 8002852:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002854:	2b00      	cmp	r3, #0
 8002856:	d15a      	bne.n	800290e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0220 	bic.w	r2, r2, #32
 8002866:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002876:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	2b01      	cmp	r3, #1
 8002896:	d135      	bne.n	8002904 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	330c      	adds	r3, #12
 80028a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	e853 3f00 	ldrex	r3, [r3]
 80028ac:	613b      	str	r3, [r7, #16]
   return(result);
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	f023 0310 	bic.w	r3, r3, #16
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	330c      	adds	r3, #12
 80028bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028be:	623a      	str	r2, [r7, #32]
 80028c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c2:	69f9      	ldr	r1, [r7, #28]
 80028c4:	6a3a      	ldr	r2, [r7, #32]
 80028c6:	e841 2300 	strex	r3, r2, [r1]
 80028ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1e5      	bne.n	800289e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b10      	cmp	r3, #16
 80028de:	d10a      	bne.n	80028f6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028fa:	4619      	mov	r1, r3
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff fe29 	bl	8002554 <HAL_UARTEx_RxEventCallback>
 8002902:	e002      	b.n	800290a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7fd ff43 	bl	8000790 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	e002      	b.n	8002914 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	e000      	b.n	8002914 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002912:	2302      	movs	r3, #2
  }
}
 8002914:	4618      	mov	r0, r3
 8002916:	3730      	adds	r7, #48	; 0x30
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800291c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002920:	b0c0      	sub	sp, #256	; 0x100
 8002922:	af00      	add	r7, sp, #0
 8002924:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002938:	68d9      	ldr	r1, [r3, #12]
 800293a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	ea40 0301 	orr.w	r3, r0, r1
 8002944:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	431a      	orrs	r2, r3
 8002954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	431a      	orrs	r2, r3
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002974:	f021 010c 	bic.w	r1, r1, #12
 8002978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002982:	430b      	orrs	r3, r1
 8002984:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002996:	6999      	ldr	r1, [r3, #24]
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	ea40 0301 	orr.w	r3, r0, r1
 80029a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4b8f      	ldr	r3, [pc, #572]	; (8002be8 <UART_SetConfig+0x2cc>)
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d005      	beq.n	80029bc <UART_SetConfig+0xa0>
 80029b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4b8d      	ldr	r3, [pc, #564]	; (8002bec <UART_SetConfig+0x2d0>)
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d104      	bne.n	80029c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029bc:	f7ff fa5c 	bl	8001e78 <HAL_RCC_GetPCLK2Freq>
 80029c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80029c4:	e003      	b.n	80029ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029c6:	f7ff fa43 	bl	8001e50 <HAL_RCC_GetPCLK1Freq>
 80029ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029d8:	f040 810c 	bne.w	8002bf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029e0:	2200      	movs	r2, #0
 80029e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80029e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80029ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80029ee:	4622      	mov	r2, r4
 80029f0:	462b      	mov	r3, r5
 80029f2:	1891      	adds	r1, r2, r2
 80029f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80029f6:	415b      	adcs	r3, r3
 80029f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029fe:	4621      	mov	r1, r4
 8002a00:	eb12 0801 	adds.w	r8, r2, r1
 8002a04:	4629      	mov	r1, r5
 8002a06:	eb43 0901 	adc.w	r9, r3, r1
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a1e:	4690      	mov	r8, r2
 8002a20:	4699      	mov	r9, r3
 8002a22:	4623      	mov	r3, r4
 8002a24:	eb18 0303 	adds.w	r3, r8, r3
 8002a28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a2c:	462b      	mov	r3, r5
 8002a2e:	eb49 0303 	adc.w	r3, r9, r3
 8002a32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	18db      	adds	r3, r3, r3
 8002a4e:	653b      	str	r3, [r7, #80]	; 0x50
 8002a50:	4613      	mov	r3, r2
 8002a52:	eb42 0303 	adc.w	r3, r2, r3
 8002a56:	657b      	str	r3, [r7, #84]	; 0x54
 8002a58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a60:	f7fd fbb8 	bl	80001d4 <__aeabi_uldivmod>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4b61      	ldr	r3, [pc, #388]	; (8002bf0 <UART_SetConfig+0x2d4>)
 8002a6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	011c      	lsls	r4, r3, #4
 8002a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a76:	2200      	movs	r2, #0
 8002a78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a84:	4642      	mov	r2, r8
 8002a86:	464b      	mov	r3, r9
 8002a88:	1891      	adds	r1, r2, r2
 8002a8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a8c:	415b      	adcs	r3, r3
 8002a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a94:	4641      	mov	r1, r8
 8002a96:	eb12 0a01 	adds.w	sl, r2, r1
 8002a9a:	4649      	mov	r1, r9
 8002a9c:	eb43 0b01 	adc.w	fp, r3, r1
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002aac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ab0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ab4:	4692      	mov	sl, r2
 8002ab6:	469b      	mov	fp, r3
 8002ab8:	4643      	mov	r3, r8
 8002aba:	eb1a 0303 	adds.w	r3, sl, r3
 8002abe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ac2:	464b      	mov	r3, r9
 8002ac4:	eb4b 0303 	adc.w	r3, fp, r3
 8002ac8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ad8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002adc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	18db      	adds	r3, r3, r3
 8002ae4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	eb42 0303 	adc.w	r3, r2, r3
 8002aec:	647b      	str	r3, [r7, #68]	; 0x44
 8002aee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002af2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002af6:	f7fd fb6d 	bl	80001d4 <__aeabi_uldivmod>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4611      	mov	r1, r2
 8002b00:	4b3b      	ldr	r3, [pc, #236]	; (8002bf0 <UART_SetConfig+0x2d4>)
 8002b02:	fba3 2301 	umull	r2, r3, r3, r1
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2264      	movs	r2, #100	; 0x64
 8002b0a:	fb02 f303 	mul.w	r3, r2, r3
 8002b0e:	1acb      	subs	r3, r1, r3
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b16:	4b36      	ldr	r3, [pc, #216]	; (8002bf0 <UART_SetConfig+0x2d4>)
 8002b18:	fba3 2302 	umull	r2, r3, r3, r2
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b24:	441c      	add	r4, r3
 8002b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b38:	4642      	mov	r2, r8
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	1891      	adds	r1, r2, r2
 8002b3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b40:	415b      	adcs	r3, r3
 8002b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b48:	4641      	mov	r1, r8
 8002b4a:	1851      	adds	r1, r2, r1
 8002b4c:	6339      	str	r1, [r7, #48]	; 0x30
 8002b4e:	4649      	mov	r1, r9
 8002b50:	414b      	adcs	r3, r1
 8002b52:	637b      	str	r3, [r7, #52]	; 0x34
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b60:	4659      	mov	r1, fp
 8002b62:	00cb      	lsls	r3, r1, #3
 8002b64:	4651      	mov	r1, sl
 8002b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b6a:	4651      	mov	r1, sl
 8002b6c:	00ca      	lsls	r2, r1, #3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	4603      	mov	r3, r0
 8002b74:	4642      	mov	r2, r8
 8002b76:	189b      	adds	r3, r3, r2
 8002b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b7c:	464b      	mov	r3, r9
 8002b7e:	460a      	mov	r2, r1
 8002b80:	eb42 0303 	adc.w	r3, r2, r3
 8002b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	18db      	adds	r3, r3, r3
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	eb42 0303 	adc.w	r3, r2, r3
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002baa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002bb2:	f7fd fb0f 	bl	80001d4 <__aeabi_uldivmod>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <UART_SetConfig+0x2d4>)
 8002bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc0:	095b      	lsrs	r3, r3, #5
 8002bc2:	2164      	movs	r1, #100	; 0x64
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	3332      	adds	r3, #50	; 0x32
 8002bce:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <UART_SetConfig+0x2d4>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	f003 0207 	and.w	r2, r3, #7
 8002bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4422      	add	r2, r4
 8002be2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002be4:	e106      	b.n	8002df4 <UART_SetConfig+0x4d8>
 8002be6:	bf00      	nop
 8002be8:	40011000 	.word	0x40011000
 8002bec:	40011400 	.word	0x40011400
 8002bf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002bfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c06:	4642      	mov	r2, r8
 8002c08:	464b      	mov	r3, r9
 8002c0a:	1891      	adds	r1, r2, r2
 8002c0c:	6239      	str	r1, [r7, #32]
 8002c0e:	415b      	adcs	r3, r3
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
 8002c12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c16:	4641      	mov	r1, r8
 8002c18:	1854      	adds	r4, r2, r1
 8002c1a:	4649      	mov	r1, r9
 8002c1c:	eb43 0501 	adc.w	r5, r3, r1
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	00eb      	lsls	r3, r5, #3
 8002c2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c2e:	00e2      	lsls	r2, r4, #3
 8002c30:	4614      	mov	r4, r2
 8002c32:	461d      	mov	r5, r3
 8002c34:	4643      	mov	r3, r8
 8002c36:	18e3      	adds	r3, r4, r3
 8002c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c3c:	464b      	mov	r3, r9
 8002c3e:	eb45 0303 	adc.w	r3, r5, r3
 8002c42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c62:	4629      	mov	r1, r5
 8002c64:	008b      	lsls	r3, r1, #2
 8002c66:	4621      	mov	r1, r4
 8002c68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	008a      	lsls	r2, r1, #2
 8002c70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c74:	f7fd faae 	bl	80001d4 <__aeabi_uldivmod>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4b60      	ldr	r3, [pc, #384]	; (8002e00 <UART_SetConfig+0x4e4>)
 8002c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	011c      	lsls	r4, r3, #4
 8002c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c98:	4642      	mov	r2, r8
 8002c9a:	464b      	mov	r3, r9
 8002c9c:	1891      	adds	r1, r2, r2
 8002c9e:	61b9      	str	r1, [r7, #24]
 8002ca0:	415b      	adcs	r3, r3
 8002ca2:	61fb      	str	r3, [r7, #28]
 8002ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ca8:	4641      	mov	r1, r8
 8002caa:	1851      	adds	r1, r2, r1
 8002cac:	6139      	str	r1, [r7, #16]
 8002cae:	4649      	mov	r1, r9
 8002cb0:	414b      	adcs	r3, r1
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cc0:	4659      	mov	r1, fp
 8002cc2:	00cb      	lsls	r3, r1, #3
 8002cc4:	4651      	mov	r1, sl
 8002cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cca:	4651      	mov	r1, sl
 8002ccc:	00ca      	lsls	r2, r1, #3
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	4642      	mov	r2, r8
 8002cd6:	189b      	adds	r3, r3, r2
 8002cd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cdc:	464b      	mov	r3, r9
 8002cde:	460a      	mov	r2, r1
 8002ce0:	eb42 0303 	adc.w	r3, r2, r3
 8002ce4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cf2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d00:	4649      	mov	r1, r9
 8002d02:	008b      	lsls	r3, r1, #2
 8002d04:	4641      	mov	r1, r8
 8002d06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d0a:	4641      	mov	r1, r8
 8002d0c:	008a      	lsls	r2, r1, #2
 8002d0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d12:	f7fd fa5f 	bl	80001d4 <__aeabi_uldivmod>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4b38      	ldr	r3, [pc, #224]	; (8002e00 <UART_SetConfig+0x4e4>)
 8002d1e:	fba3 2301 	umull	r2, r3, r3, r1
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	2264      	movs	r2, #100	; 0x64
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	1acb      	subs	r3, r1, r3
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	3332      	adds	r3, #50	; 0x32
 8002d30:	4a33      	ldr	r2, [pc, #204]	; (8002e00 <UART_SetConfig+0x4e4>)
 8002d32:	fba2 2303 	umull	r2, r3, r2, r3
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d3c:	441c      	add	r4, r3
 8002d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d42:	2200      	movs	r2, #0
 8002d44:	673b      	str	r3, [r7, #112]	; 0x70
 8002d46:	677a      	str	r2, [r7, #116]	; 0x74
 8002d48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d4c:	4642      	mov	r2, r8
 8002d4e:	464b      	mov	r3, r9
 8002d50:	1891      	adds	r1, r2, r2
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	415b      	adcs	r3, r3
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d5c:	4641      	mov	r1, r8
 8002d5e:	1851      	adds	r1, r2, r1
 8002d60:	6039      	str	r1, [r7, #0]
 8002d62:	4649      	mov	r1, r9
 8002d64:	414b      	adcs	r3, r1
 8002d66:	607b      	str	r3, [r7, #4]
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d74:	4659      	mov	r1, fp
 8002d76:	00cb      	lsls	r3, r1, #3
 8002d78:	4651      	mov	r1, sl
 8002d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d7e:	4651      	mov	r1, sl
 8002d80:	00ca      	lsls	r2, r1, #3
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	4603      	mov	r3, r0
 8002d88:	4642      	mov	r2, r8
 8002d8a:	189b      	adds	r3, r3, r2
 8002d8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d8e:	464b      	mov	r3, r9
 8002d90:	460a      	mov	r2, r1
 8002d92:	eb42 0303 	adc.w	r3, r2, r3
 8002d96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	663b      	str	r3, [r7, #96]	; 0x60
 8002da2:	667a      	str	r2, [r7, #100]	; 0x64
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002db0:	4649      	mov	r1, r9
 8002db2:	008b      	lsls	r3, r1, #2
 8002db4:	4641      	mov	r1, r8
 8002db6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dba:	4641      	mov	r1, r8
 8002dbc:	008a      	lsls	r2, r1, #2
 8002dbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002dc2:	f7fd fa07 	bl	80001d4 <__aeabi_uldivmod>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <UART_SetConfig+0x4e4>)
 8002dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd0:	095b      	lsrs	r3, r3, #5
 8002dd2:	2164      	movs	r1, #100	; 0x64
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	3332      	adds	r3, #50	; 0x32
 8002dde:	4a08      	ldr	r2, [pc, #32]	; (8002e00 <UART_SetConfig+0x4e4>)
 8002de0:	fba2 2303 	umull	r2, r3, r2, r3
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	f003 020f 	and.w	r2, r3, #15
 8002dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4422      	add	r2, r4
 8002df2:	609a      	str	r2, [r3, #8]
}
 8002df4:	bf00      	nop
 8002df6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e00:	51eb851f 	.word	0x51eb851f

08002e04 <memset>:
 8002e04:	4402      	add	r2, r0
 8002e06:	4603      	mov	r3, r0
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d100      	bne.n	8002e0e <memset+0xa>
 8002e0c:	4770      	bx	lr
 8002e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e12:	e7f9      	b.n	8002e08 <memset+0x4>

08002e14 <__libc_init_array>:
 8002e14:	b570      	push	{r4, r5, r6, lr}
 8002e16:	4d0d      	ldr	r5, [pc, #52]	; (8002e4c <__libc_init_array+0x38>)
 8002e18:	4c0d      	ldr	r4, [pc, #52]	; (8002e50 <__libc_init_array+0x3c>)
 8002e1a:	1b64      	subs	r4, r4, r5
 8002e1c:	10a4      	asrs	r4, r4, #2
 8002e1e:	2600      	movs	r6, #0
 8002e20:	42a6      	cmp	r6, r4
 8002e22:	d109      	bne.n	8002e38 <__libc_init_array+0x24>
 8002e24:	4d0b      	ldr	r5, [pc, #44]	; (8002e54 <__libc_init_array+0x40>)
 8002e26:	4c0c      	ldr	r4, [pc, #48]	; (8002e58 <__libc_init_array+0x44>)
 8002e28:	f000 f826 	bl	8002e78 <_init>
 8002e2c:	1b64      	subs	r4, r4, r5
 8002e2e:	10a4      	asrs	r4, r4, #2
 8002e30:	2600      	movs	r6, #0
 8002e32:	42a6      	cmp	r6, r4
 8002e34:	d105      	bne.n	8002e42 <__libc_init_array+0x2e>
 8002e36:	bd70      	pop	{r4, r5, r6, pc}
 8002e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e3c:	4798      	blx	r3
 8002e3e:	3601      	adds	r6, #1
 8002e40:	e7ee      	b.n	8002e20 <__libc_init_array+0xc>
 8002e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e46:	4798      	blx	r3
 8002e48:	3601      	adds	r6, #1
 8002e4a:	e7f2      	b.n	8002e32 <__libc_init_array+0x1e>
 8002e4c:	08002eb0 	.word	0x08002eb0
 8002e50:	08002eb0 	.word	0x08002eb0
 8002e54:	08002eb0 	.word	0x08002eb0
 8002e58:	08002eb4 	.word	0x08002eb4

08002e5c <memcpy>:
 8002e5c:	440a      	add	r2, r1
 8002e5e:	4291      	cmp	r1, r2
 8002e60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002e64:	d100      	bne.n	8002e68 <memcpy+0xc>
 8002e66:	4770      	bx	lr
 8002e68:	b510      	push	{r4, lr}
 8002e6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e72:	4291      	cmp	r1, r2
 8002e74:	d1f9      	bne.n	8002e6a <memcpy+0xe>
 8002e76:	bd10      	pop	{r4, pc}

08002e78 <_init>:
 8002e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7a:	bf00      	nop
 8002e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e7e:	bc08      	pop	{r3}
 8002e80:	469e      	mov	lr, r3
 8002e82:	4770      	bx	lr

08002e84 <_fini>:
 8002e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e86:	bf00      	nop
 8002e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e8a:	bc08      	pop	{r3}
 8002e8c:	469e      	mov	lr, r3
 8002e8e:	4770      	bx	lr
